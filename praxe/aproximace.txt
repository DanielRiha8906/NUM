least_squares_manual <- function(x, y) {
  # Create the design matrix
  n <- length(x)
  X <- cbind(1, x)  # Augmented matrix [1, x]
  
  # Compute the normal equation components
  XtX <- t(X) %*% X
  Xty <- t(X) %*% y
  
  # Solve XtX * beta = Xty using Gaussian elimination
  beta <- gaussian_elimination(XtX, Xty)
  
  # Compute fitted values
  fitted <- X %*% beta
  mse <- mean((y - fitted)^2)
  
  return(list(coefficients = beta, mse = mse))
}

# Manual Gaussian elimination solver for Ax = b
gaussian_elimination <- function(A, b) {
  n <- nrow(A)
  augmented <- cbind(A, b)  # Augment matrix A with b
  
  # Forward elimination
  for (i in 1:n) {
    # Pivoting (optional but improves stability)
    max_row <- which.max(abs(augmented[i:n, i])) + (i - 1)
    if (max_row != i) {
      temp <- augmented[i, ]
      augmented[i, ] <- augmented[max_row, ]
      augmented[max_row, ] <- temp
    }
    
    # Make diagonal element 1
    augmented[i, ] <- augmented[i, ] / augmented[i, i]
    
    # Eliminate column elements below the pivot
    for (j in (i + 1):n) {
      augmented[j, ] <- augmented[j, ] - augmented[j, i] * augmented[i, ]
    }
  }
  
  # Back substitution
  x <- numeric(n)
  for (i in n:1) {
    x[i] <- augmented[i, n + 1] - sum(augmented[i, (i + 1):n] * x[(i + 1):n])
  }
  
  return(x)
}
